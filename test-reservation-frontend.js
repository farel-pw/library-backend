/**
 * Script de test complet du syst√®me de r√©servation
 * V√©rifie que les 3 livres indisponibles permettent bien la r√©servation
 */

const axios = require('axios');

const API_BASE = 'http://localhost:4401';

async function testCompletReservationSystem() {
  console.log('üß™ TEST COMPLET DU SYST√àME DE R√âSERVATION');
  console.log('==========================================\n');

  try {
    // 1. V√©rifier l'√©tat des livres
    console.log('üìö 1. V√©rification de l\'√©tat des livres...');
    const livresResponse = await axios.get(`${API_BASE}/livres`);
    const livres = livresResponse.data.data;
    
    const livresIndisponibles = livres.filter(livre => !livre.disponible && livre.peut_reserver);
    console.log(`‚úÖ ${livresIndisponibles.length} livres indisponibles trouv√©s :`);
    
    livresIndisponibles.forEach(livre => {
      console.log(`   - ${livre.titre} (ID: ${livre.id}) - ${livre.exemplaires_disponibles}/${livre.exemplaires_total} disponibles`);
    });

    if (livresIndisponibles.length < 3) {
      console.log('‚ùå Pas assez de livres indisponibles. Ex√©cution du script de configuration...');
      return;
    }

    // 2. Cr√©er un utilisateur de test
    console.log('\nüë§ 2. Cr√©ation d\'un utilisateur de test...');
    let userToken;
    let userId;
    
    try {
      const registerResponse = await axios.post(`${API_BASE}/signup`, {
        nom: 'Utilisateur Test R√©servation',
        email: 'reservation_test@example.com',
        password: 'password123',
        role: 'utilisateur'
      });
      console.log('‚úÖ Utilisateur cr√©√© avec succ√®s');
      userToken = registerResponse.data.token;
      userId = registerResponse.data.user.id;
    } catch (error) {
      if (error.response?.data?.message?.includes('existe d√©j√†')) {
        console.log('üë§ Utilisateur existe d√©j√†, connexion...');
        const loginResponse = await axios.post(`${API_BASE}/userlogin`, {
          email: 'reservation_test@example.com',
          password: 'password123'
        });
        userToken = loginResponse.data.token;
        userId = loginResponse.data.user.id;
        console.log('‚úÖ Connexion r√©ussie');
      } else {
        throw error;
      }
    }

    // 3. Tester la r√©servation pour chaque livre indisponible
    console.log('\nüìù 3. Test des r√©servations...');
    const livre = livresIndisponibles[0]; // Prenons le premier livre indisponible
    
    console.log(`üìñ Test de r√©servation pour : "${livre.titre}"`);
    
    try {
      const reservationResponse = await axios.post(`${API_BASE}/reservations`, {
        bookId: livre.id
      }, {
        headers: {
          'Authorization': `Bearer ${userToken}`
        }
      });
      
      console.log('‚úÖ R√©servation cr√©√©e avec succ√®s !');
      console.log(`   Message: ${reservationResponse.data.message}`);
      
      if (reservationResponse.data.data) {
        console.log(`   Position dans la file: ${reservationResponse.data.data.position}`);
      }
      
    } catch (error) {
      if (error.response?.data?.message?.includes('d√©j√† r√©serv√©')) {
        console.log('‚ÑπÔ∏è  Livre d√©j√† r√©serv√© par cet utilisateur');
      } else {
        console.log('‚ùå Erreur de r√©servation:', error.response?.data?.message || error.message);
      }
    }

    // 4. V√©rifier les r√©servations de l'utilisateur
    console.log('\nüìã 4. V√©rification des r√©servations de l\'utilisateur...');
    try {
      const mesReservationsResponse = await axios.get(`${API_BASE}/reservations/mes-reservations`, {
        headers: {
          'Authorization': `Bearer ${userToken}`
        }
      });
      
      const reservations = mesReservationsResponse.data.data;
      console.log(`‚úÖ ${reservations.length} r√©servation(s) trouv√©e(s) :`);
      
      reservations.forEach((reservation, index) => {
        console.log(`   ${index + 1}. "${reservation.titre}" - Position: ${reservation.position} - Statut: ${reservation.statut}`);
      });
      
    } catch (error) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des r√©servations:', error.response?.data?.message || error.message);
    }

    // 5. R√©sum√© final
    console.log('\nüìä 5. R√âSUM√â DU TEST');
    console.log('===================');
    console.log(`‚úÖ ${livresIndisponibles.length} livres sont correctement indisponibles`);
    console.log('‚úÖ Le bouton "R√©server" doit s\'afficher pour ces livres');
    console.log('‚úÖ Le syst√®me de r√©servation fonctionne');
    console.log('‚úÖ L\'utilisateur peut voir ses r√©servations');
    
    console.log('\nüéØ INSTRUCTIONS POUR LE FRONTEND :');
    console.log('1. Allez sur http://localhost:3001');
    console.log('2. Connectez-vous avec un compte utilisateur');
    console.log('3. Allez dans la section "Livres"');
    console.log('4. Vous devriez voir le bouton "R√©server" sur les livres indisponibles :');
    livresIndisponibles.slice(0, 3).forEach(livre => {
      console.log(`   - ${livre.titre}`);
    });
    console.log('5. Cliquez sur "R√©server" pour tester le syst√®me');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.response?.data || error.message);
  }
}

// Ex√©cution du test
testCompletReservationSystem();
