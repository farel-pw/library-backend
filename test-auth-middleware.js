const axios = require('axios');

const BASE_URL = 'http://localhost:4401';

async function testAuthMiddleware() {
  try {
    console.log('üîê Test du middleware d\'authentification\n');

    // 1. Connexion
    const loginResponse = await axios.post(`${BASE_URL}/userlogin`, {
      email: 'admin@bibliotheque.com',
      password: 'admin123'
    });

    const token = loginResponse.data.token;
    console.log('üé´ Token obtenu');

    // 2. Test endpoint qui utilise req.user (GET profile)
    console.log('\n2Ô∏è‚É£ Test GET profile (utilise req.user)...');
    try {
      const response = await axios.get(`${BASE_URL}/utilisateurs/profile`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      console.log('‚úÖ GET profile fonctionne');
    } catch (error) {
      console.log('‚ùå GET profile √©choue:', error.response?.data);
    }

    // 3. Cr√©er un endpoint de test pour d√©bugger req.user
    console.log('\n3Ô∏è‚É£ Test de token d√©codage...');
    
    // D√©coder manuellement le token
    const jwt = require('jsonwebtoken');
    const config = require('./src/config');
    
    try {
      const decoded = jwt.verify(token, config.secret);
      console.log('üîç Token d√©cod√© manuellement:', decoded);
    } catch (decodeError) {
      console.log('‚ùå Erreur d√©codage token:', decodeError.message);
    }

    // 4. Test avec un token modifi√© pour voir la diff√©rence
    console.log('\n4Ô∏è‚É£ Test avec headers diff√©rents...');
    
    // Test avec Bearer
    try {
      const response1 = await axios.put(`${BASE_URL}/utilisateurs/profile`, 
        { nom: 'Test Bearer' },
        { headers: { 'Authorization': `Bearer ${token}` } }
      );
      console.log('‚úÖ Test Bearer r√©ussi:', response1.data);
    } catch (error1) {
      console.log('‚ùå Test Bearer √©chou√©:', error1.response?.data);
    }

    // Test sans Bearer
    try {
      const response2 = await axios.put(`${BASE_URL}/utilisateurs/profile`, 
        { nom: 'Test Sans Bearer' },
        { headers: { 'Authorization': token } }
      );
      console.log('‚úÖ Test sans Bearer r√©ussi:', response2.data);
    } catch (error2) {
      console.log('‚ùå Test sans Bearer √©chou√©:', error2.response?.data);
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

testAuthMiddleware().catch(console.error);
