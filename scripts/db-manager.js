#!/usr/bin/env node

require('dotenv').config();

const { execSync } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  console.log('üîß Gestionnaire de Base de Donn√©es - Biblioth√®que');
  console.log('================================================');
  console.log('');
  console.log('Options disponibles :');
  console.log('1. Migration seule (cr√©er les tables)');
  console.log('2. Seeding seul (ins√©rer les donn√©es de test)');
  console.log('3. Suppression compl√®te (drop toutes les tables)');
  console.log('4. Base fra√Æche (drop + migration)');
  console.log('5. Installation compl√®te (drop + migration + seeding)');
  console.log('6. Reset (√©quivalent √† option 5)');
  console.log('0. Quitter');
  console.log('');

  const choice = await question('Choisissez une option (0-6) : ');

  try {
    switch (choice) {
      case '1':
        console.log('üöÄ Ex√©cution des migrations...');
        execSync('npm run db:migrate', { stdio: 'inherit' });
        break;
      
      case '2':
        console.log('üå± Ex√©cution du seeding...');
        execSync('npm run db:seed', { stdio: 'inherit' });
        break;
      
      case '3':
        const confirmDrop = await question('‚ö†Ô∏è  √ätes-vous s√ªr de vouloir supprimer toutes les tables ? (oui/non) : ');
        if (confirmDrop.toLowerCase() === 'oui' || confirmDrop.toLowerCase() === 'yes') {
          console.log('üóëÔ∏è  Suppression des tables...');
          execSync('npm run db:drop', { stdio: 'inherit' });
        } else {
          console.log('‚ùå Op√©ration annul√©e');
        }
        break;
      
      case '4':
        console.log('üîÑ Cr√©ation d\'une base fra√Æche...');
        execSync('npm run db:fresh', { stdio: 'inherit' });
        break;
      
      case '5':
      case '6':
        console.log('üîÑ Installation compl√®te...');
        execSync('npm run db:migrate-seed', { stdio: 'inherit' });
        break;
      
      case '0':
        console.log('üëã Au revoir !');
        break;
      
      default:
        console.log('‚ùå Option invalide');
        break;
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution :', error.message);
    process.exit(1);
  }

  rl.close();
}

main();
