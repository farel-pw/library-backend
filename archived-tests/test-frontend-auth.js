const axios = require('axios');

const BASE_URL = 'http://localhost:4401';

async function testFrontendAuth() {
  console.log('üîê Test de l\'authentification frontend');
  console.log('========================================\n');

  try {
    // 1. Test avec diff√©rents utilisateurs
    const testUsers = [
      { email: 'admin@bibliotheque.com', password: 'admin123' },
      { email: 'jean.dupont@example.com', password: 'password123' },
      { email: 'fankoufarida@2ie.edu', password: 'password123' },
      { email: 'kouasseumartial@2ie.edu', password: 'password123' }
    ];

    for (const user of testUsers) {
      console.log(`\nüîç Test avec ${user.email}:`);
      
      try {
        const loginResponse = await axios.post(`${BASE_URL}/userlogin`, {
          email: user.email,
          password: user.password
        });
        
        if (loginResponse.data.error) {
          console.log('‚ùå Erreur de connexion:', loginResponse.data.message);
          continue;
        }
        
        const token = loginResponse.data.token;
        const userInfo = loginResponse.data.user;
        console.log(`‚úÖ Connexion r√©ussie: ${userInfo.prenom} ${userInfo.nom} (${userInfo.role})`);
        
        // Test d'ajout de commentaire avec ce token
        console.log('   üß™ Test d\'ajout de commentaire...');
        const commentResponse = await axios.post(`${BASE_URL}/commentaires`, {
          livre_id: 1,
          commentaire: `Test commentaire de ${userInfo.prenom} - ${new Date().toLocaleString()}`,
          note: 5
        }, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (commentResponse.data.error) {
          console.log('   ‚ùå Erreur commentaire:', commentResponse.data.message);
        } else {
          console.log('   ‚úÖ Commentaire ajout√© avec succ√®s!');
        }
        
        // Test de r√©cup√©ration des commentaires utilisateur
        console.log('   üìñ Test r√©cup√©ration commentaires utilisateur...');
        const userCommentsResponse = await axios.get(`${BASE_URL}/commentaires/user`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (userCommentsResponse.data.error) {
          console.log('   ‚ùå Erreur r√©cup√©ration:', userCommentsResponse.data.message);
        } else {
          console.log(`   ‚úÖ Commentaires utilisateur: ${userCommentsResponse.data.data.length}`);
        }
        
      } catch (error) {
        console.log(`‚ùå Erreur avec ${user.email}:`, error.response?.data?.message || error.message);
      }
    }

    // 2. Test avec des mots de passe par d√©faut si les tests √©chouent
    console.log('\nüîß Test avec des mots de passe par d√©faut:');
    const defaultPasswords = ['password123', 'admin123', '123456', 'password'];
    
    for (const password of defaultPasswords) {
      try {
        const loginResponse = await axios.post(`${BASE_URL}/userlogin`, {
          email: 'jean.dupont@example.com',
          password: password
        });
        
        if (!loginResponse.data.error) {
          console.log(`‚úÖ Mot de passe trouv√© pour jean.dupont@example.com: ${password}`);
          break;
        }
      } catch (error) {
        console.log(`‚ùå √âchec avec mot de passe: ${password}`);
      }
    }

    console.log('\n‚úÖ Tests d\'authentification termin√©s');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

testFrontendAuth();
