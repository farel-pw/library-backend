/**
 * Contr√¥leur Analytics - Gestion des statistiques et m√©triques
 * 
 * Ce contr√¥leur g√®re toutes les requ√™tes li√©es aux statistiques de la biblioth√®que :
 * - Statistiques du tableau de bord (dashboard)
 * - Analyses des livres (emprunts, popularit√©, etc.)
 * - Analyses des utilisateurs (activit√©, nouveaux utilisateurs, etc.)
 * - M√©triques temporelles et tendances
 * 
 * @author Votre Nom
 * @version 1.0.0
 */

const AnalyticsService = require('../services/AnalyticsService');

class AnalyticsController {
  /**
   * R√©cup√®re les statistiques principales pour le tableau de bord
   * 
   * Cette m√©thode fournit un aper√ßu global de l'activit√© de la biblioth√®que :
   * - Nombre total d'utilisateurs, livres, emprunts
   * - Statistiques d'activit√© (emprunts actifs, en retard)
   * - M√©triques de performance (r√©servations, commentaires)
   * 
   * @param {Object} req - Requ√™te Express
   * @param {Object} res - R√©ponse Express
   * @returns {Object} Statistiques du tableau de bord
   */
  static async getDashboardStats(req, res) {
    try {
      console.log("üéØ AnalyticsController: R√©cup√©ration des statistiques du dashboard");
      const result = await AnalyticsService.getDashboardStats();
      console.log("üéØ AnalyticsController: Service result:", result.error ? 'ERROR' : 'SUCCESS');
      
      if (result.error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des statistiques:", result.message);
        return res.status(500).json(result);
      }
      
      console.log("‚úÖ Statistiques du dashboard r√©cup√©r√©es avec succ√®s");
      res.status(200).json(result);
    } catch (error) {
      console.error('‚ùå AnalyticsController Error:', error);
      res.status(500).json({ error: true, message: "Erreur interne du serveur" });
    }
  }

  /**
   * R√©cup√®re les analytics sp√©cifiques aux livres
   * 
   * Analyse les donn√©es li√©es aux livres sur une p√©riode donn√©e :
   * - Livres les plus emprunt√©s
   * - Tendances d'emprunts par genre
   * - Taux de rotation des livres
   * 
   * @param {Object} req - Requ√™te Express
   * @param {Object} req.query.period - P√©riode d'analyse (30j, 90j, 1an, etc.)
   * @param {Object} res - R√©ponse Express
   * @returns {Object} Analytics des livres
   */
  static async getBooksAnalytics(req, res) {
    try {
      const { period } = req.query;
      console.log(`üìö Analytics des livres pour la p√©riode: ${period || 'par d√©faut'}`);
      
      const result = await AnalyticsService.getBooksAnalytics(period);
      
      if (result.error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des analytics des livres:", result.message);
        return res.status(500).json(result);
      }
      
      console.log("‚úÖ Analytics des livres r√©cup√©r√©es avec succ√®s");
      res.status(200).json(result);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des analytics des livres:', error);
      res.status(500).json({ error: true, message: "Erreur interne du serveur" });
    }
  }

  /**
   * R√©cup√®re les analytics sp√©cifiques aux utilisateurs
   * 
   * Analyse les donn√©es li√©es aux utilisateurs sur une p√©riode donn√©e :
   * - Utilisateurs les plus actifs
   * - Nouvelles inscriptions
   * - Taux d'engagement
   * 
   * @param {Object} req - Requ√™te Express
   * @param {Object} req.query.period - P√©riode d'analyse (30j, 90j, 1an, etc.)
   * @param {Object} res - R√©ponse Express
   * @returns {Object} Analytics des utilisateurs
   */
  static async getUsersAnalytics(req, res) {
    try {
      const { period } = req.query;
      console.log(`üë• Analytics des utilisateurs pour la p√©riode: ${period || 'par d√©faut'}`);
      
      const result = await AnalyticsService.getUsersAnalytics(period);
      
      if (result.error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des analytics des utilisateurs:", result.message);
        return res.status(500).json(result);
      }
      
      console.log("‚úÖ Analytics des utilisateurs r√©cup√©r√©es avec succ√®s");
      res.status(200).json(result);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des analytics des utilisateurs:', error);
      res.status(500).json({ error: true, message: "Erreur interne du serveur" });
    }
  }

  static async getBorrowsAnalytics(req, res) {
    try {
      const { period } = req.query;
      const result = await AnalyticsService.getBorrowsAnalytics(period);
      
      if (result.error) {
        return res.status(500).json(result);
      }
      
      res.status(200).json(result);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des analytics des emprunts:', error);
      res.status(500).json({ error: true, message: "Erreur interne du serveur" });
    }
  }

  static async getTopBooks(req, res) {
    try {
      const { limit, period } = req.query;
      const result = await AnalyticsService.getTopBooks(limit, period);
      
      if (result.error) {
        return res.status(500).json(result);
      }
      
      res.status(200).json(result);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du top des livres:', error);
      res.status(500).json({ error: true, message: "Erreur interne du serveur" });
    }
  }

  static async getActiveUsers(req, res) {
    try {
      const { limit, period } = req.query;
      const result = await AnalyticsService.getActiveUsers(limit, period);
      
      if (result.error) {
        return res.status(500).json(result);
      }
      
      res.status(200).json(result);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des utilisateurs actifs:', error);
      res.status(500).json({ error: true, message: "Erreur interne du serveur" });
    }
  }

  static async getMonthlyTrends(req, res) {
    try {
      const { year } = req.query;
      const result = await AnalyticsService.getMonthlyTrends(year);
      
      if (result.error) {
        return res.status(500).json(result);
      }
      
      res.status(200).json(result);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des tendances mensuelles:', error);
      res.status(500).json({ error: true, message: "Erreur interne du serveur" });
    }
  }

  static async getGenreStats(req, res) {
    try {
      const result = await AnalyticsService.getGenreStats();
      
      if (result.error) {
        return res.status(500).json(result);
      }
      
      res.status(200).json(result);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statistiques par genre:', error);
      res.status(500).json({ error: true, message: "Erreur interne du serveur" });
    }
  }
}

module.exports = AnalyticsController;
