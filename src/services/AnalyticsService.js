/**
 * Service Analytics - Logique m√©tier pour les statistiques
 * 
 * Ce service contient la logique m√©tier pour toutes les op√©rations d'analytics :
 * - R√©cup√©ration et traitement des statistiques
 * - Calculs d'agr√©gations et de m√©triques
 * - Formatage des donn√©es pour l'API
 * - Gestion des erreurs de traitement des donn√©es
 * 
 * @author Votre Nom
 * @version 1.0.0
 */

const Analytics = require('../models/Analytics');

class AnalyticsService {
  /**
   * R√©cup√®re et traite les statistiques du tableau de bord
   * 
   * Cette m√©thode orchestre la r√©cup√©ration de toutes les m√©triques principales :
   * - Compteurs globaux (utilisateurs, livres, emprunts)
   * - M√©triques d'activit√© (emprunts actifs, en retard)
   * - Indicateurs de performance
   * 
   * @returns {Object} Donn√©es format√©es pour le dashboard
   */
  static async getDashboardStats() {
    try {
      console.log("üìä AnalyticsService: D√©but de la r√©cup√©ration des statistiques du dashboard");
      
      // R√©cup√©ration des donn√©es brutes depuis le mod√®le
      const stats = await Analytics.getDashboardStats();
      
      console.log("üìä AnalyticsService: Statistiques r√©cup√©r√©es avec succ√®s");
      console.log("üìä D√©tails des stats:", stats);
      
      return { error: false, data: stats };
    } catch (error) {
      console.error('‚ùå AnalyticsService Error:', error);
      console.error('‚ùå AnalyticsService Error Stack:', error.stack);
      return { error: true, message: "Erreur lors de la r√©cup√©ration des statistiques du dashboard" };
    }
  }

  /**
   * R√©cup√®re les analytics sp√©cifiques aux livres
   * 
   * Analyse les donn√©es des livres sur une p√©riode donn√©e :
   * - Livres les plus populaires
   * - Taux d'emprunt par genre
   * - Tendances temporelles
   * 
   * @param {string} period - P√©riode d'analyse (d√©faut: 30 jours)
   * @returns {Object} Analytics des livres
   */
  static async getBooksAnalytics(period = '30') {
    try {
      console.log(`üìö AnalyticsService: R√©cup√©ration des analytics des livres (p√©riode: ${period} jours)`);
      
      const analytics = await Analytics.getBooksAnalytics(period);
      
      console.log("üìö Analytics des livres r√©cup√©r√©es avec succ√®s");
      return { error: false, data: analytics };
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des analytics des livres:', error);
      return { error: true, message: "Erreur lors de la r√©cup√©ration des analytics des livres" };
    }
  }

  /**
   * R√©cup√®re les analytics sp√©cifiques aux utilisateurs
   * 
   * Analyse les donn√©es des utilisateurs sur une p√©riode donn√©e :
   * - Utilisateurs les plus actifs
   * - Nouvelles inscriptions
   * - Patterns d'utilisation
   * 
   * @param {string} period - P√©riode d'analyse (d√©faut: 30 jours)
   * @returns {Object} Analytics des utilisateurs
   */
  static async getUsersAnalytics(period = '30') {
    try {
      console.log(`üë• AnalyticsService: R√©cup√©ration des analytics des utilisateurs (p√©riode: ${period} jours)`);
      
      const analytics = await Analytics.getUsersAnalytics(period);
      
      console.log("üë• Analytics des utilisateurs r√©cup√©r√©es avec succ√®s");
      return { error: false, data: analytics };
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des analytics des utilisateurs:', error);
      return { error: true, message: "Erreur lors de la r√©cup√©ration des analytics des utilisateurs" };
    }
  }

  /**
   * R√©cup√®re les analytics sp√©cifiques aux emprunts
   * 
   * Analyse les donn√©es des emprunts sur une p√©riode donn√©e :
   * - Tendances d'emprunts
   * - Taux de retour
   * - Emprunts en retard
   * 
   * @param {string} period - P√©riode d'analyse (d√©faut: 30 jours)
   * @returns {Object} Analytics des emprunts
   */
  static async getBorrowsAnalytics(period = '30') {
    try {
      console.log(`üìÖ AnalyticsService: R√©cup√©ration des analytics des emprunts (p√©riode: ${period} jours)`);
      
      const analytics = await Analytics.getBorrowsAnalytics(period);
      
      console.log("üìÖ Analytics des emprunts r√©cup√©r√©es avec succ√®s");
      return { error: false, data: analytics };
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des analytics des emprunts:', error);
      return { error: true, message: "Erreur lors de la r√©cup√©ration des analytics des emprunts" };
    }
  }

  /**
   * R√©cup√®re la liste des livres les plus populaires
   * 
   * @param {number} limit - Nombre maximum de livres √† retourner (d√©faut: 10)
   * @param {string} period - P√©riode d'analyse (d√©faut: 30 jours)
   * @returns {Object} Top des livres les plus emprunt√©s
   */
  static async getTopBooks(limit = 10, period = '30') {
    try {
      console.log(`üèÜ AnalyticsService: R√©cup√©ration du top ${limit} des livres (p√©riode: ${period} jours)`);
      
      const topBooks = await Analytics.getTopBooks(limit, period);
      return { error: false, data: topBooks };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du top des livres:', error);
      return { error: true, message: "Error fetching top books" };
    }
  }

  static async getActiveUsers(limit = 10, period = '30') {
    try {
      const activeUsers = await Analytics.getActiveUsers(limit, period);
      return { error: false, data: activeUsers };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des utilisateurs actifs:', error);
      return { error: true, message: "Error fetching active users" };
    }
  }

  static async getMonthlyTrends(year = new Date().getFullYear()) {
    try {
      const trends = await Analytics.getMonthlyTrends(year);
      return { error: false, data: trends };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des tendances mensuelles:', error);
      return { error: true, message: "Error fetching monthly trends" };
    }
  }

  static async getGenreStats() {
    try {
      const genreStats = await Analytics.getGenreStats();
      return { error: false, data: genreStats };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statistiques par genre:', error);
      return { error: true, message: "Error fetching genre stats" };
    }
  }
}

module.exports = AnalyticsService;
